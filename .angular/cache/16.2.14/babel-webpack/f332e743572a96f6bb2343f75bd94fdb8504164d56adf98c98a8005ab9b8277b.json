{"ast":null,"code":"import { __decorate } from \"tslib\";\nexport let SignInGuard = class SignInGuard {\n  constructor(router, cookieService) {\n    this.router = router;\n    this.cookieService = cookieService;\n  }\n  canActivate(next, state) {\n    const sessionUser = this.cookieService.get(\"session_user\");\n    if (sessionUser) {\n      return true;\n    } else {\n      this.router.navigate([\"/session/sign-in\"]);\n      return false;\n    }\n  }\n};\nSignInGuard = __decorate([Injectable({\n  providedIn: \"root\"\n})], SignInGuard);","map":{"version":3,"names":["SignInGuard","constructor","router","cookieService","canActivate","next","state","sessionUser","get","navigate","__decorate","Injectable","providedIn"],"sources":["/Users/jay/buwebdev/nodebucket/src/app/sign-in.guard.ts"],"sourcesContent":["import { CanActivateFn, Router } from \"@angular/router\";\nimport { inject } from \"@angular/core\";\nimport { CookieService } from \"ngx-cookie-service\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class SignInGuard implements CanActivate {\n  constructor(private router: Router, private cookieService: CookieService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    const sessionUser = this.cookieService.get(\"session_user\");\n\n    if (sessionUser) {\n      return true;\n    } else {\n      this.router.navigate([\"/session/sign-in\"]);\n      return false;\n    }\n  }\n}\n"],"mappings":";AAOO,WAAMA,WAAW,GAAjB,MAAMA,WAAW;EACtBC,YAAoBC,MAAc,EAAUC,aAA4B;IAApD,KAAAD,MAAM,GAANA,MAAM;IAAkB,KAAAC,aAAa,GAAbA,aAAa;EAAkB;EAE3EC,WAAWA,CAACC,IAA4B,EAAEC,KAA0B;IAClE,MAAMC,WAAW,GAAG,IAAI,CAACJ,aAAa,CAACK,GAAG,CAAC,cAAc,CAAC;IAE1D,IAAID,WAAW,EAAE;MACf,OAAO,IAAI;KACZ,MAAM;MACL,IAAI,CAACL,MAAM,CAACO,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;MAC1C,OAAO,KAAK;;EAEhB;CACD;AAbYT,WAAW,GAAAU,UAAA,EAHvBC,UAAU,CAAC;EACVC,UAAU,EAAE;CACb,CAAC,C,EACWZ,WAAW,CAavB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}